public class EjemploJacobi1 {

    public static void main(String[] args) {
        double[][] coefficients = {
            {2, 1, -1},
            {-3, -1, 2},
            {-2, 1, 2}
        };
        double[] constants = {8, -11, -3};
        double[] initialGuess = {0, 0, 0};
        double tolerance = 0.0001;
        int maxIterations = 1000;

        double[] solution = jacobi(coefficients, constants, initialGuess, tolerance, maxIterations);

        for (int i = 0; i < solution.length; i++) {
            System.out.println("x" + (i + 1) + " = " + solution[i]);
        }
    }

    public static double[] jacobi(double[][] A, double[] b, double[] initialGuess, double tolerance, int maxIterations) {
        // Método jacobi() va aquí
    }
}


ejemplo 4

public class EjemploJacobi4 {

    public static void main(String[] args) {
        double[][] coefficients = {
            {1, 1, -1},
            {2, -3, 2},
            {3, 2, 1}
        };
        double[] constants = {3, -1, 4};
        double[] initialGuess = {0, 0, 0};
        double tolerance = 0.0001;
        int maxIterations = 1000;

        double[] solution = jacobi(coefficients, constants, initialGuess, tolerance, maxIterations);

        for (int i = 0; i < solution.length; i++) {
            System.out.println("x" + (i + 1) + " = " + solution[i]);
        }
    }

    public static double[] jacobi(double[][] A, double[] b, double[] initialGuess, double tolerance, int maxIterations) {
        // Método jacobi() va aquí
    }
}


ejemplo 3

public class EjemploJacobi3 {

    public static void main(String[] args) {
        double[][] coefficients = {
            {1, 2, -1},
            {2, -1, 3},
            {3, 1, 2}
        };
        double[] constants = {1, -2, 7};
        double[] initialGuess = {0, 0, 0};
        double tolerance = 0.0001;
        int maxIterations = 1000;

        double[] solution = jacobi(coefficients, constants, initialGuess, tolerance, maxIterations);

        for (int i = 0; i < solution.length; i++) {
            System.out.println("x" + (i + 1) + " = " + solution[i]);
        }
    }

    public static double[] jacobi(double[][] A, double[] b, double[] initialGuess, double tolerance, int maxIterations) {
        // Método jacobi() va aquí
    }
}


ejemplo5

public class EjemploJacobi5 {

    public static void main(String[] args) {
        double[][] coefficients = {
            {2, 3},
            {1, 1}
        };
        double[] constants = {4, 1};
        double[] initialGuess = {0, 0};
        double tolerance = 0.0001;
        int maxIterations = 1000;

        double[] solution = jacobi(coefficients, constants, initialGuess, tolerance, maxIterations);

        for (int i = 0; i < solution.length; i++) {
            System.out.println("x" + (i + 1) + " = " + solution[i]);
        }
    }

    public static double[] jacobi(double[][] A, double[] b, double[] initialGuess, double tolerance, int maxIterations) {
        // Método jacobi() va aquí
    }
}


ejemplo 2

public class EjemploJacobi2 {

    public static void main(String[] args) {
        double[][] coefficients = {
            {3, -1, 2},
            {2, 3, 1},
            {1, -1, 1}
        };
        double[] constants = {5, 3, -2};
        double[] initialGuess = {0, 0, 0};
        double tolerance = 0.0001;
        int maxIterations = 1000;

        double[] solution = jacobi(coefficients, constants, initialGuess, tolerance, maxIterations);

        for (int i = 0; i < solution.length; i++) {
            System.out.println("x" + (i + 1) + " = " + solution[i]);
        }
    }

    public static double[] jacobi(double[][] A, double[] b, double[] initialGuess, double tolerance, int maxIterations) {
        // Método jacobi() va aquí
    }
}