public class GaussJordan {
    
    public static void main(String[] args) {
        double[][] coefficients = {
            {2, 1, -1, 8},
            {-3, -1, 2, -11},
            {-2, 1, 2, -3}
        };
        
        solve(coefficients);
    }
    
    public static void solve(double[][] coefficients) {
        int n = coefficients.length;
        
        // Forward Elimination
        for (int i = 0; i < n; i++) {
            // Pivoteo parcial
            int maxRowIndex = i;
            for (int k = i + 1; k < n; k++) {
                if (Math.abs(coefficients[k][i]) > Math.abs(coefficients[maxRowIndex][i])) {
                    maxRowIndex = k;
                }
            }
            double[] temp = coefficients[i];
            coefficients[i] = coefficients[maxRowIndex];
            coefficients[maxRowIndex] = temp;

            // Hacer 0s debajo del pivote
            for (int j = i + 1; j < n + 1; j++) {
                coefficients[i][j] /= coefficients[i][i];
            }
            coefficients[i][i] = 1.0;
            
            // Eliminación hacia adelante
            for (int k = 0; k < n; k++) {
                if (k != i) {
                    double factor = coefficients[k][i];
                    for (int j = i; j < n + 1; j++) {
                        coefficients[k][j] -= factor * coefficients[i][j];
                    }
                }
            }
        }
        
        // Imprimir resultados
        for (int i = 0; i < n; i++) {
            System.out.print("x" + (i+1) + " = " + coefficients[i][n] + "\n");
        }
    }
}

Ejemplo 2

public class EjemploGaussJordan1 {

    public static void main(String[] args) {
        double[][] coefficients = {
            {2, 1, -1, 8},
            {-3, -1, 2, -11},
            {-2, 1, 2, -3}
        };

        solve(coefficients);
    }

    public static void solve(double[][] coefficients) {
        int n = coefficients.length;

        // Forward Elimination
        for (int i = 0; i < n; i++) {
            // Pivoting
            int maxRowIndex = i;
            for (int k = i + 1; k < n; k++) {
                if (Math.abs(coefficients[k][i]) > Math.abs(coefficients[maxRowIndex][i])) {
                    maxRowIndex = k;
                }
            }
            double[] temp = coefficients[i];
            coefficients[i] = coefficients[maxRowIndex];
            coefficients[maxRowIndex] = temp;

            // Make 0s below the pivot
            for (int j = i + 1; j < n + 1; j++) {
                coefficients[i][j] /= coefficients[i][i];
            }
            coefficients[i][i] = 1.0;

            // Forward elimination
            for (int k = 0; k < n; k++) {
                if (k != i) {
                    double factor = coefficients[k][i];
                    for (int j = i; j < n + 1; j++) {
                        coefficients[k][j] -= factor * coefficients[i][j];
                    }
                }
            }
        }

        // Print results
        for (int i = 0; i < n; i++) {
            System.out.println("x" + (i + 1) + " = " + coefficients[i][n]);
        }
    }
}
 

Ejemplo 3

public class EjemploGaussJordan2 {

    public static void main(String[] args) {
        double[][] coefficients = {
            {3, -1, 2, 5},
            {2, 3, 1, 3},
            {1, -1, 1, -2}
        };

        solve(coefficients);
    }

    public static void solve(double[][] coefficients) {
        // Método solve() va aquí (usar el código anterior)
    }
} 


ejemplo 4

public class EjemploGaussJordan3 {

    public static void main(String[] args) {
        double[][] coefficients = {
            {1, 2, -1, 1},
            {2, -1, 3, -2},
            {3, 1, 2, 7}
        };

        solve(coefficients);
    }

    public static void solve(double[][] coefficients) {
        // Método solve() va aquí (usar el código anterior)
    }
} 

ejemplo 5

public class EjemploGaussJordan4 {

    public static void main(String[] args) {
        double[][] coefficients = {
            {1, 1, -1, 3},
            {2, -3, 2, -1},
            {3, 2, 1, 4}
        };

        solve(coefficients);
    }

    public static void solve(double[][] coefficients) {
        // Método solve() va aquí (usar el código anterior)
    }
}